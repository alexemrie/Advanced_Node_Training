Double Equals vs Triple Equals

One of best features of the language... But how?
  "Abstract - Equality - Comparison"
  http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison

Double Equals
  From the spec... (Spec Algorithm) "=="
    ReturnIfAbrupt(x).
    ReturnIfAbrupt(y).

    If Type(x) is the same as Type(y), then
      return the result of performing Strict Equality Comparison x === y.


    If x is null and y is undefined, return true.
    If x is undefined and y is null, return true.
      => null value and undefined coerced to each other and to no other values (i.e. 0)


    If Type(x) is Number and Type(y) is String,
      return the result of the comparison x == ToNumber(y).


    If Type(x) is String and Type(y) is Number,
      return the result of the comparison ToNumber(x) == y.


    If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.
    If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).
    If Type(x) is either String, Number, or Symbol and Type(y) is Object, then
      return the result of the comparison x == ToPrimitive(y).

    If Type(x) is Object and Type(y) is either String, Number, or Symbol, then
      return the result of the comparison ToPrimitive(x) == y.

    Return false.

    ______________________________
    Recursive function ==
      [] == ![]; //true

      [] == ![];
      [] == !true;
      [] == false;
      "" == false;
      "" == 0;
      0 == 0;

  __________________________________________________________________________________________
Explicit vs Implicit Coercion

  Explicit... => look like typeCasting used in other languages, it's obvious from the code that you are doing it
    string <--> number

                  Number
                    baz = Number(foo);
                      baz;       //123 ***Explicit

                  ParseInt
                    var foo = "123";
                      var baz = parseInt(foo, 10);
                      baz;       //123

                      ***parses number literally out of string
                      parseInt("123abc") => 123

                  Unary plus operator... takes one operator
                    baz = +foo;
                    baz;
                          ***all that + Unary operator does is try to convert to Number

                  String
                    baz = 456;
                    foo = baz.toString();
                    foo;        //"456"
                          ***Comments => toString() method implies that baz is an object when in fact it is a number (Explicitly Implicit)
                            => "boxing" ---> when call a method against a value that is not an object toString (Explicit)
                                        ---> coerce to object by placing object wrapper around it(Implicit)

                    foo = String(baz);
                    foo;        //"456"

                  Date
                    var now = +new Date();   // do not use!!
                    // now = Date.now();     //use this one!

                    var foo = "foo";
                    // ~N -> -(N + 1)
                    if (~foo.indexOf("f")) {
                      alert("found it!");
                    }
                        ***Keeps the return -1 utility offered by other programs for things not found
                        *** In C programming can only return single type --->
                        ~ turns into negative of number - 1 (if it is a number)
                          ~N -> -(N + 1)
                          ~N -> -(-1 + 1)
                          ~N -> -(0)

                          Boolean(-0) -> false
                          if something is not found ---> returns negative 1 ---> ~-1

  Implicit... => happens as a side effect of some other operation
    var foo = "123";
    var baz = foo - 0;
    baz;          //123

    baz = foo - "0"
    baz;          //123

    baz = foo / 1;
    baz;          //123

    baz = 456;
    foo = baz + "";
    foo;          //"456"
            ***Plus operator is overloaded
              If both sides are already a number ==> Mathematic addition
              Else do string concatenation
            ***Some people prefer this method of coercing to String (including the man who wrote JS); Less explicit

    baz = 456;
    foo = baz - "";
    foo;          //456 ... WTF?!
            *** Minus is NOT overloaded
              Try to convert "" to Number ---> Empty String coerces to 0

    Boolean
      var foo = "123";
      if (foo) {
        alert("sure.")      //yup
      }

      foo = 0;
      if (foo) {
        alert("Right.");     // 0 is falsey
      }

      foo = 0;
      if (foo == false) {
        alert("yeah.")

                        //0 is falsey --->
                          2 possible explanations...
                            foo is coerced to Boolean ---> Boolean(0) --> false (0 is falsey)
                            false is coerced to Number ----> Number(false) --> false (Number(0) returns false)

                          What actually happens...
                            false value becomes a number ---> 0
                            0 == 0
                            true
      }

      var foo = 0;
      var baz = foo || "foo";         "||" "&&" Boolean Operators---> end result expected to be a boolean ---> NOT TRUE in JS

                                      Result in default value idiom ---> second argument is the default value
                                      Actually a selector operator ---> selects the second operator

      function foo() {return true;}
      function bar() {return false;}

      bar = null;

      bar && bar();
      bar ? bar() : bar;
      if (bar) bar();

        ** if bar is null then will simply return null
        ** if bar were a function that can be invoked () --> bar() is truthy ---> then will run bar();



          **Equivalent to
            var baz = foo || "foo";
            var baz = foo ? foo : "foo";      **Default operator "||"
                                              ** if foo is truthy --> use first expression
                                              ** else use second expression
                                              var baz = "foo" || "foo";
                                              baz; // "foo"


          **Equivalent to
            var baz = foo && "foo";
            var baz = foo ? "foo" : foo;      ** Guard operator "&&"
                                              var baz = "foo" && "foo";
                                              baz; //"foo"

                                              var baz = "foo" && "dog";
                                              baz; //"dog"



                                              ** Boolean(foo) ---> true "foo"
                                                              ---> false foo



            foo;              ** Assume that if have foo then can invoke it if it is a function
            foo && foo();     ** If foo is falsey then don't do anything, otherwise invoke the function
            if (foo) foo();   ** foo coerced to Boolean, if it is a function then it is truthy, if true then invoke function
      baz;

  __________________________________________________________________________________________
Falsy && Truthy
  JavaScript
    Falsy = if try to coerce to a boolean, then will produce false
    ***Library does not explicitly define truthy values because would be infinite

    Falsy                                True
    ""                                   "foo"
    0,+0,-0                               23
    null                                  {a:1}
    NaN                                   [1,3]
    false                                 true
    undefined                             function(){...}

    Never use Double Equals to false/true...
      == false
      == true

var foo = "123";
var baz = Boolean(foo);
baz;      //true

baz = !!foo;
baz;      //true
      ! unary operator coerces to Boolean --> flips to opposite Boolean value of the one coerced to

baz = foo ? true : false;
baz;      //true
      //explicitly implicit ---> implicitly coerces to Boolean before does the test



var foo = "123";
if (foo == true) {
  alert("Wat!?");     //foo is a number --> tries to convert true to Number --> Number(true) === 1 -->
                      false does not run
}

foo = [];
if (foo) {
  alert("Sure.");
}

if (foo == false) {
  alert(Wat?!);
}

________________________

3 > 2 > 1; //false

true > 1;

1 > 1;  //false
